set background=dark
set colorcolumn=81
" set complete=.,b,u,]
set completeopt=noinsert,menuone,noselect
set gdefault      " Replace all matches on a line instead of just the first
set hidden        " needed for coc
set hlsearch      " highlight search results
set ignorecase    " searches are case-insensitive
set matchtime=0   " Speed up escape after (){} chars
set nobackup      " Don't make a backup before overwriting a file
set nofoldenable
set noshowmode
set nowrap
set nowritebackup " Don't make a backup before overwriting a file.
set number relativenumber " The best of both worlds
set redrawtime=1000 " Stop highlighting if it takes more than a second
set scrolloff=999
set shortmess+=c
set synmaxcol=250 " Don't try to highlight lines longer than 250 characters.
set smartcase     " searches are case-sensitive if a capital is in term
set termguicolors " True color in neovim and vim 8
set ttimeout      " Fast timeout
set undodir=$HOME/.undodir
set undofile
set undolevels=500
set undoreload=500
set wildmenu
set wildmode=longest:full,full
set winwidth=84
set winheight=10
set winminheight=5

""
" Commands
""

command QA qa
command Qa qa
command Q q
command Wq wq
command WQ wq
command W w

" vim-tmux-navigator overrides needed to allow Sublime Text-like <C-\> comments
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 2

" Redefine the 4/5 mappings we'll use
nnoremap <silent> <C-h> :TmuxNavigateLeft<CR>
nnoremap <silent> <C-j> :TmuxNavigateDown<CR>
nnoremap <silent> <C-k> :TmuxNavigateUp<CR>
nnoremap <silent> <C-l> :TmuxNavigateRight<CR>

" Get dot command repeatability in visual mode
xnoremap . :normal.<CR>

" Up and down by visual lines, not literal lines
nnoremap gj j
nnoremap gk k
nnoremap j gj
nnoremap k gk
vnoremap gj j
vnoremap gk k
vnoremap j gj
vnoremap k gk

nnoremap Q :echoe "Disabled Ex mode"<CR>

nnoremap U :echoe "Disabled lowercasing"<CR>
vnoremap U :echoe "Disabled lowercasing"<CR>

""
" Appearance
""

" Palette-specific config
let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:one_allow_italics = 1

colorscheme one

" Speed up signify: only display
let g:signify_disable_by_default = 1
let g:signify_vcs_list = ['git']
nnoremap <Leader>g :SignifyToggle<CR>

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

autocmd VimEnter * RainbowParentheses .
autocmd VimEnter * TroubleRefresh

""
" Code navigation, LSP, etc.
""

" Bind K to grep word under cursor
nnoremap <silent> K :Find <C-R><C-W><CR>
nnoremap \ :Find<Space>
nnoremap <C-P> :Files<CR>

set tags^=./.git/tags;

" Jump to the first result if only one tag match,
" otherwise show the candidates list
nnoremap <C-]> <Esc>:exe "tjump " . expand("<cword>")<Esc>
nnoremap <silent><C-]> <cmd>lua vim.lsp.buf.definition()<CR>

nmap <silent> <leader>d <Plug>DashSearch

" nnoremap gi <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap gh <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap gr <cmd>lua vim.lsp.buf.references()<CR>
nnoremap gn <cmd>lua vim.lsp.buf.rename()<CR>

function! FloatingFZF(width, height, border_highlight)
  function! s:create_float(hl, opts)
    let buf = nvim_create_buf(v:false, v:true)
    let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
    let win = nvim_open_win(buf, v:true, opts)
    call setwinvar(win, '&winhighlight', 'NormalFloat:'.a:hl)
    call setwinvar(win, '&colorcolumn', '')
    return buf
  endfunction
  " Size and position
  let width = float2nr(&columns * a:width)
  let height = float2nr(&lines * a:height)
  let row = float2nr((&lines - height) / 2)
  let col = float2nr((&columns - width) / 2)
  " Border
  let top = '╭' . repeat('─', width - 2) . '╮'
  let mid = '│' . repeat(' ', width - 2) . '│'
  let bot = '╰' . repeat('─', width - 2) . '╯'
  let border = [top] + repeat([mid], height - 2) + [bot]
  " Draw frame
  let s:frame = s:create_float(a:border_highlight, {'row': row, 'col': col, 'width': width, 'height': height})
  call nvim_buf_set_lines(s:frame, 0, -1, v:true, border)
  " Draw viewport
  call s:create_float('Normal', {'row': row + 1, 'col': col + 2, 'width': width - 4, 'height': height - 2})
  autocmd BufWipeout <buffer> execute 'bwipeout' s:frame
endfunction

let g:fzf_layout = { 'window': 'call FloatingFZF(0.9, 0.8, "Comment")' }
let g:fzf_buffers_jump = 1
let g:fzf_tags_command = './.git/hooks/tags'
let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Exception'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)
command! -bang -nargs=* FindAll call fzf#vim#grep('rg --column --line-number --no-ignore --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

""
" Plugin settings
""

let g:splitjoin_trailing_comma=1
let g:splitjoin_curly_brace_padding=1
let g:splitjoin_ruby_options_as_arguments=1
let splitjoin_ruby_hanging_args=0
let splitjoin_ruby_curly_braces=0

""
" Testing
""

let test#ruby#minitest#executable = "bundle exec rake test"
let g:test#javascript#runner = 'jest'
let test#strategy = "dispatch"
let test#runner_commands = ['RSpec']

nnoremap <Leader>a :TestSuite<CR>
nnoremap <Leader>f :TestLast --only-failures<CR>
" Force headless spec execution for Capybara
nnoremap <Leader>S :execute "Dispatch NO_HEADLESS=true rspec ". expand("%") .":". line(".")<CR>

""
" Terminal
""

" === Neovim terminal mappings from @devinrm ===
if has('nvim')
  augroup TerminalNumbers
    autocmd!
    autocmd TermOpen * setlocal nonumber norelativenumber
  augroup END

  augroup TerminalExitStatus
    autocmd!
    autocmd TermClose * call feedkeys("\<CR>")
  augroup END

  augroup TerminalInsert
    autocmd!
    autocmd BufEnter * if &buftype == 'terminal' |:startinsert| endif
  augroup END
endif

""
" Yanking and pasting
""
augroup highlight_yank
  autocmd!
  au TextYankPost * lua vim.highlight.on_yank {higroup="IncSearch", timeout=1000, on_visual=false}
augroup END

" Re-select prior selection in visual mode
nnoremap gv `[v`]

" When pasting over/replacing a region in visual mode,
" retain the pasted content rather than the replaced region.
vmap <silent> <expr> p paste#ReplaceVisualSelectionWithYankRegister()

" Paste system clipboard contents
nnoremap <Leader>p "*p
" Yank to system clipboard
vnoremap <Leader>y "*y
" Yank to end of line, like C, D
nnoremap Y y$

" Rehighlight after moving text in visual mode
vnoremap < <gv
vnoremap > >gv

" Comment/un-comment like Sublime
nnoremap <C-\> :TComment<CR>
vnoremap <C-\> :TComment<CR>

""
" Splits and moving files
""

" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
noremap <Leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
noremap <Leader>v :vnew <C-R>=expand("%:p:h") . '/'<CR>

nnoremap <Leader>o <cmd>TroubleToggle document_diagnostics<CR>
nnoremap <Leader>m :w<CR>:Move <C-R>%
nnoremap <Leader>q :call quickfix#ToggleQuickfixList()<CR>

""
" Miscellaneous
""

let g:marked_app = 'Mark Text'

""
" Rails
""

let g:rails_projections = {
\ "app/admin/*.rb": { "command": "admin" },
\ "app/models/*.rb": {
\   "related": "spec/factories/{plural}.rb",
\ },
\ "app/controllers/*_controller.rb": {
\   "related": "spec/requests/{basename}_spec.rb",
\ },
\ "config/application.rb": {"command": "application"},
\ "config/locales/*.json": { "command": "locale" },
\ "Gemfile": {"command": "gemfile"},
\ "config/routes.rb": {"command": "routes"},
\ "lib/tasks/*.rake": {
\   "alternate": "spec/tasks/{basename}_spec.rb",
\ },
\ "spec/factories/*.rb": {
\   "command": "factory",
\   "related": "app/models/{singular}.rb",
\ },
\ "spec/requests/*_spec.rb": {
\   "related": "app/controllers/{basename}_controller.rb",
\ },
\ }

""
" Python
""

let g:python_host_prog = $HOME."/.asdf/shims/python2"
let g:python3_host_prog = $HOME."/.asdf/shims/python3"

""
" Command line
""

" Insert current file directory path (without file name)
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
